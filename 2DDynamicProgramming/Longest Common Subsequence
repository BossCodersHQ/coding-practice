class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        width, height = len(text1), len(text2)
        dp = [[0] * width for i in range(height)]

        def dfs(r, c):
            if r == height or c == width:
                return 0
            if dp[r][c]:
                return dp[r][c]
            if text1[c] == text2[r]:
                dp[r][c] = 1 + dfs(r + 1, c + 1)
            else:
                dp[r][c] = max(dfs(r + 1, c), dfs(r, c + 1))
            return dp[r][c]

        dfs(0, 0)
        return dp[0][0]


if __name__ == "__main__":
    s = Solution()
    assert s.longestCommonSubsequence("abcde", "ace") == 3
    assert s.longestCommonSubsequence("abc", "abc") == 3
    assert s.longestCommonSubsequence("abc", "def") == 0
    assert s.longestCommonSubsequence("abcba", "abcbcba") == 5
    assert s.longestCommonSubsequence("bsbininm", "jmjkbkjkv") == 1
