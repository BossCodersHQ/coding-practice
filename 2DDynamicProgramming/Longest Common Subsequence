class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        width, height = len(text1), len(text2)

        # The Right and bottom edges need to be 0s for algo to work
        dp = [[0] * (width + 1) for i in range(height + 1)]

        for r in range(height - 1, -1, -1):
            for c in range(width - 1, -1, -1):
                if text1[c] == text2[r]:
                    dp[r][c] = 1 + dp[r + 1][c + 1]
                else:
                    dp[r][c] = max(dp[r + 1][c], dp[r][c + 1])
        return dp[0][0]


if __name__ == "__main__":
    s = Solution()
    assert s.longestCommonSubsequence("abcde", "ace") == 3
    assert s.longestCommonSubsequence("abc", "abc") == 3
    assert s.longestCommonSubsequence("abc", "def") == 0
    assert s.longestCommonSubsequence("abcba", "abcbcba") == 5
    assert s.longestCommonSubsequence("bsbininm", "jmjkbkjkv") == 1
